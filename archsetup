#!/bin/bash
# Intended for a fresh Arch Linux install, run as root.
# requires bash 5.0+, internet connection, and git.

# exit on error
set -eu

# source variable definitions from config file
source "$(dirname "$0")/archsetup.conf"

# check bash version
if ((BASH_VERSINFO[0] < 5)); then
    echo "This script requires Bash 5.0 or higher." >&2
    exit 1
fi

# this is the entire script workflow
main() {
    elapse make_user
    elapse git_setup
    elapse config
    elapse pacman_install
    elapse rust_setup
    elapse paru_get
    elapse paru_install
    elapse btrfs_setup    # disable if not using btrfs
    elapse clean
    echo "done"
}

# report time, send stdout to the void
elapse() {
    local func="$1"
    shift
    local start end elapsed
    start=$EPOCHREALTIME
    "$func" "$@" > /dev/null
    end=$EPOCHREALTIME
    elapsed=$(awk "BEGIN {print $end - $start}")
    printf "%s took %.3f seconds\n" "$func" "$elapsed"
}

# add user, give sudo access, and set password
make_user() {
    useradd -m "$USERNAME"
    echo "$USERNAME ALL=(ALL:ALL) NOPASSWD: ALL" >>"/etc/sudoers.d/00-$USERNAME"
    passwd "$USERNAME"
}

# set username and email for git
git_setup() {
    git config --global user.name "$GIT_USER"
    git config --global user.email "$GIT_EMAIL"
    git config pull.rebase false

}

# clone dotfiles from github/nieuemma
config() {
    rm -rf "/home/$USERNAME/.config"
    git clone "https://github.com/nieuemma/config" "/home/$USERNAME/.config"
    chown -R "$USERNAME" "/home/$USERNAME"
}

# install packages using pacman
pacman_install() {
    pacman -S --noconfirm "${ARCH_PKG[@]}"
}

# setup rust
rust_setup() {
    rustup default stable
}
# install paru aur helper
paru_get() {
    pacman -S --needed --noconfirm base-devel
    git clone https://aur.archlinux.org/paru.git /tmp/paru
    chown $USERNAME /tmp/paru
    cd /tmp/paru
    su $USERNAME -c "makepkg -si --noconfirm"
}

# install packages using paru
paru_install() {
    echo "installing packages with paru"
    su $USERNAME -c "paru -S --noconfirm ${AUR_PKG[@]}"
}

# enable quotas and create initial snapshot
btrfs_setup() {
    btrfs quota enable /
    timeshift --btrfs --create --comments post-setup
}

# clean up
clean() {
    pacman -Sc --noconfirm
    chsh -s /usr/bin/zsh "$USERNAME"
}

# call main function
main
